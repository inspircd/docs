name: ssl_openssl

introduction: ""

depends_on:
  what: a third-party library ([OpenSSL](https://www.openssl.org))

description: |-
  This module allows TLS (SSL) encrypted connections using the [OpenSSL](https://www.openssl.org) library.

configuration:
- name: bind
  description: |-
    This module extends [the core `<bind>` tags](/4/configuration#bind) with the following fields:
  extends: true
  attributes:
  - name: sslprofile
    type: Text
    default: null
    description: |-
      *This MUST be set to the name of an OpenSSL TLS (SSL) profile to listen for secure connections with OpenSSL.*
  details: ""
  example: |-
    Listens for OpenSSL encrypted IRC connections on the *:6697 endpoint with an [TLS (SSL) profile](#sslprofile) named "Clients":

    ```xml
    <bind address="*"
          port="6697"
          ...
          sslprofile="Clients"
          type="clients">
    ```

    Listens for OpenSSL encrypted server connections on the *:7000 endpoint with an [TLS (SSL) profile](#sslprofile) named "Servers":

    ```xml
    <bind address="*"
          port="7000"
          ...
          sslprofile="Servers"
          type="servers">
    ```

- name: openssl
  description: |-
    The `<openssl>` tag defines settings about how the ssl_openssl module should behave. This tag can only be defined once.
  attributes:
  - name: onrehash
    type: Boolean
    required: false
    default: 'Yes'
    description: |-
      Whether TLS (SSL) profiles (see below) should be reloaded as part of a normal rehash.
  details: ""
  example: |-
    ```xml
    <openssl onrehash="yes">
    ```

- name: sslprofile
  description: |-
    The `<sslprofile>` tag defines a TLS (SSL) profile for sockets to use. This tag can be defined as many times as required.
  attributes:
  - name: name
    type: Text
    required: true
    default: null
    description: |-
      The name of this TLS (SSL) profile. This is used in `<bind:ssl>` for incoming connections and `<link:ssl>` for outgoing server connections.
  - name: provider
    type: Text
    required: true
    default: null
    description: |-
      *This MUST be set to "openssl" to use the OpenSSL library.*
  - name: cafile
    type: Text
    required: false
    default: ca.pem
    description: |-
      The path to the CA in PEM format.
  - name: certfile
    type: Text
    required: false
    default: cert.pem
    description: |-
      The path to the certificate in PEM format.
  - name: ciphers
    type: Text
    required: false
    default: null
    description: |-
      If defined then an [OpenSSL cipher string](https://www.openssl.org/docs/manmaster/man1/ciphers.html).
  - name: clientclearoptions
    type: Number
    required: false
    default: 0
    description: |-
      Raw integer value of options to clear on the client context. Don't change this unless you know what you are doing.
  - name: clientsetoptions
    type: Number
    required: false
    default: 0
    description: |-
      Raw integer value of options to set on the client context. Don't change this unless you know what you are doing.
  - name: compression
    type: Boolean
    required: false
    default: 'No'
    description: |-
      Whether insecure TLS (SSL) compression is enabled.
  - name: crlfile
    type: Text
    required: false
    default: null
    description: |-
      If defined then the path to the CRL file in PEM format.
  - name: crlmode
    type: Text
    required: false
    default: chain
    description: |-
      The mode to use when checking for certificate revocations.
  - name: crlpath
    type: Text
    required: false
    default: null
    description: |-
      If defined then the path to the CRL directory.
  - name: dhfile
    type: Text
    required: false
    default: dhparams.pem
    description: |-
      The path to the DH parameters in PEM format. This does nothing on OpenSSL 3.0.0+.
  - name: ecdhcurve
    type: Text
    required: false
    default: prime256v1
    description: |-
      The ECDH curve.
  - name: hash
    type: Text
    required: false
    default: sha256
    description: |-
      A space-delimited list of hash algorithms used for TLS (SSL) client fingerprints.
  - name: keyfile
    type: Text
    required: false
    default: key.pem
    description: |-
      The path to the private key in PEM format.
  - name: renegotiation
    type: Boolean
    required: false
    default: 'No'
    description: |-
      Whether insecure TLS (SSL) renegotiation is enabled.
  - name: requestclientcert
    type: Boolean
    required: false
    default: 'Yes'
    description: |-
      Whether to request a TLS (SSL) certificate from clients.
  - name: serverclearoptions
    type: Number
    required: false
    default: 0
    description: |-
      Raw integer value of options to clear on the server context.  Don't change this unless you know what you are doing.
  - name: serversetoptions
    type: Number
    required: false
    default: 0
    description: |-
      Raw integer value of options to set on the server context.  Don't change this unless you know what you are doing.
  - name: tlsv11
    type: Boolean
    required: false
    default: 'No'
    description: |-
      Whether the TLSv1.1 protocol is enabled.
  - name: tlsv12
    type: Boolean
    required: false
    default: 'Yes'
    description: |-
      Whether the TLSv1.2 protocol is enabled.
  - name: tlsv13
    type: Boolean
    required: false
    default: 'Yes'
    description: |-
      Whether the TLSv1.3 protocol is enabled.
  details: |-
    The crlmode field should be set to one of the following values:

    Value | Description
    ----- | -----------
    chain | Check if any certificate in the chain has been revoked.
    leaf  | Only check if the leaf certificate has been revoked.

    The hash field should be set to one of the values shown in `openssl list --digest-commands`.

  example: |-
    ```xml
    <sslprofile name="Clients"
                provider="openssl"
                cafile="ca.pem"
                certfile="cert.pem"
                crlfile=""
                ciphers="DEFAULT"
                compression="no"
                dhfile="dhparams.pem"
                ecdhcurve="prime256v1"
                hash="sha3-256"
                keyfile="key.pem"
                renegotiation="no"
                requestclientcert="yes"
                tlsv11="no"
                tlsv12="yes"
                tlsv13="yes">
    ```

special_notes: |-
  If you are using a version of OpenSSL older than 3.0 you will also need to provide a DH parameters file. This file can be generated using `openssl dhparam -out dhparams.pem 2048` and then be placed in your config directory.

  Mozilla publish [documentation on how to configure server-side TLS](https://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_configurations) which can be used for selecting a secure OpenSSL configuration. We recommend using the intermediate profile to allow compatibility with as many clients as possible whilst maintaining a decent level of security.

  If you are having trouble getting InspIRCd to read your .pem files then check that it has read access to the full path up to the location of them. If you are using a system that uses AppArmor you may need to edit the AppArmor profile to allow InspIRCd to read them too.

  If you are using Let's Encrypt and are having problems with missing intermediate certificates then make sure you are using fullchain.pem from Certbot/Dehydrated/etc in `<sslprofile:certfile>` instead of cert.pem as the latter does not contain intermediate certificates.
