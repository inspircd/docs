name: rline

description: |-
  This module adds the `/RLINE` command which allows server operators to prevent users matching a nickname!username@hostname+realname regular expression from connecting to the server.

configuration:
- name: <rline>
  description: |-
    The `<rline>` tag defines settings about how the rline module should behave. This tag can only be defined once.
  attributes:
  - name: engine
    type: Text
    required: false
    default: None
    description: |-
      The regular expression engine to use for checking matches.
  - name: matchonnickchange
    type: Boolean
    required: false
    default: 'No'
    description: |-
      Whether to attempt to match users when they change their nickname.
  - name: zlineonmatch
    type: Boolean
    required: false
    default: 'No'
    description: |-
      Whether to add a Z-line on the IP address of users that match a R-line.
  details: |-
    The engine field should be set to the name of a regular expression engine.

    {! 3/modules/_regex_table.md !}

  example: |-
    ```xml
    <rline engine="pcre"
           matchonnickchange="no"
           zlineonmatch="no">
    ```

commands:
- name: RLINE
  param_count: 1, 3
  syntax: '`<regex> [<duration> <reason>]`'
  description: |-
    Allows server operators to add and remove regular expression bans on nickname!username@hostname+realname masks.

example_commands: |-
  !!! note ""
      The following examples assume that the "pcre" regex module is being used.

      See the `<rline>` documentation above for more information.

  Bans users connecting from example.com for one week:

  ```plaintext
  /RLINE ^[^!]+![^@]+@example.com\+.+$ 7d :Trolling is forbidden
  ```

  Bans users that have "BotBot" in their real name forever:

  ```plaintext
  /RLINE ^[^!]+![^@]+@[^\+]+\+.*BotBot.*$ 0 :No bots allowed
  ```

  Unbans users connecting from example.com:

  ```plaintext
  /RLINE ^[^!]+![^@]+@example.com\+.+$
  ```

stats:
- char: R
  description: Lists all regular expression lines.

special_notes: |-
  R-lines are expired lazily when a lookup happens for performance reasons. This means that expiry messages may display later than expected.
